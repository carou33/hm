=== Large-Scale Network System Development AI Prompt ===

Project Overview:
- Purpose: Develop a highly scalable, resilient, and secure network management system designed to handle large volumes of traffic, with advanced traffic obfuscation, protocol support, and automation.
- Languages involved: Node.js, Python, Go, C++, Rust, Shell scripting, YAML, JSON, Terraform, Kubernetes, etc.
- Team size: 1000+ developers; simulate contributions, code reviews, and collaboration.
- Key attributes: Modular architecture, extensive documentation, infrastructure as code, CI/CD pipelines, monitoring, auto-scaling, security, and legacy support.

---

### **Project Structure:**

Use the following directory structure as the backbone for your code generation, understanding, and documentation:

/network-system/
├── /docs/                                 # Documentation & design docs
│   ├── architecture/
│   │   ├── overview.md
│   │   ├── diagrams/
│   │   │   ├── architecture.png
│   │   │   ├── network_topology.svg
│   │   │   └── flowcharts/
│   │   │       ├── request_flow.svg
│   │   │       └── error_handling.png
│   │   ├── design/
│   │   │   ├── system_design.md
│   │   │   ├── protocol.md
│   │   │   └── scalability.md
│   │   └── legacy/
│   │       ├── v1/
│   │       │   ├── old_system_architecture.md
│   │       │   └── deprecated_protocols.md
│   │       └── v2/
│   │           ├── current_protocols.md
│   │           └── migration.md
│   ├── api/
│   │   ├── openapi.yaml
│   │   ├── swagger/
│   │   │   ├── api.swagger.json
│   │   │   └── api.swagger.yaml
│   │   └── deprecated/
│   │       ├── v1/
│   │       │   ├── old_api.md
│   │       │   └── old_endpoints.md
│   │       └── v2/
│   │           ├── current_api.md
│   │           └── migration_notes.md
│   └── /legacy/                         # Old or deprecated docs
│       ├── legacy_arch.md
│       ├── deprecated_protocols.md
│       └── old_design.md
│
├── /infra/                                # Infrastructure as Code + Cloud configs
│   ├── /terraform/                        # Terraform modules
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   ├── outputs.tf
│   │   ├── modules/
│   │   │   ├── network/
│   │   │   │   ├── main.tf
│   │   │   │   └── variables.tf
│   │   │   ├── compute/
│   │   │   │   ├── main.tf
│   │   │   │   └── variables.tf
│   │   │   └── storage/
│   │   │       ├── main.tf
│   │   │       └── variables.tf
│   │   └── environments/
│   │       ├── dev.tfvars
│   │       ├── staging.tfvars
│   │       └── prod.tfvars
│   ├── /kubernetes/                       # K8s manifests
│   │   ├── deployment.yaml
│   │   ├── service.yaml
│   │   ├── ingress.yaml
│   │   ├── storage/
│   │   │   ├── pvc.yaml
│   │   │   └── pv.yaml
│   │   └── helm_charts/
│   │       ├── system/
│   │       │   ├── Chart.yaml
│   │       │   ├── values.yaml
│   │       │   └── templates/
│   │       │       ├── deployment.yaml
│   │       │       └── service.yaml
│   │       └── monitoring/
│   │           ├── Chart.yaml
│   │           ├── values.yaml
│   │           └── templates/
│   ├── /ansible/                          # Ansible playbooks and roles
│   │   ├── setup.yml
│   │   ├── deploy.yml
│   │   └── roles/
│   │       ├── core/
│   │       │   ├── tasks/
│   │       │   │   ├── main.yml
│   │       │   │   └── setup.yml
│   │       │   ├── handlers/
│   │       │   │   └── main.yml
│   │       │   └── templates/
│   │       │       └── core_config.yml
│   │       └── network/
│   │           ├── tasks/
│   │           │   ├── main.yml
│   │           │   └── network.yml
│   │           └── templates/
│   │               └── network_config.yml
│   ├── /cloud/                            # Cloud provider deployment scripts
│   │   ├── aws/
│   │   │   ├── cloudformation.yml
│   │   │   └── deploy.sh
│   │   ├── gcp/
│   │   │   ├── deployment.yaml
│   │   │   └── deploy.sh
│   │   └── azure/
│   │       ├── arm_template.json
│   │       └── deploy.sh
│   └── /common/                          # Shared IaC utils
│       ├── network.tf
│       ├── security.tf
│       └── storage.tf
│
├── /src/                                   # Source code (massive, modular)
│   ├── /microservices/                     # Microservices collection
│   │   ├── /core/                         # Core network services
│   │   │   ├── /nodejs/                     # Node.js core services
│   │   │   │   ├── index.js
│   │   │   │   ├── serviceHandler.js
│   │   │   │   ├── middleware/
│   │   │   │   │   ├── auth.js
│   │   │   │   │   ├── rateLimit.js
│   │   │   │   │   └── headers.js
│   │   │   │   ├── config/
│   │   │   │   │   └── system-config.json
│   │   │   │   ├── logs/
│   │   │   │   │   ├── access.log
│   │   │   │   │   └── error.log
│   │   │   │   └── tests/
│   │   │   │       ├── service.test.js
│   │   │   │       └── load.test.js
│   │   │   ├── /rust/                        # Rust high-perf modules
│   │   │   │   ├── src/
│   │   │   │   ├── Cargo.toml
│   │   │   │   └── README.md
│   │   │   ├── /go/                          # Protocol layer (Go)
│   │   │   │   ├── main.go
│   │   │   │   ├── protocol.go
│   │   │   │   └── README.md
│   │   │   ├── /c++/                         # C++ modules
│   │   │   │   ├── core.cpp
│   │   │   │   ├── core.h
│   │   │   │   └── build/
│   │   │   └── /shared/                      # Shared logic
│   │   │       ├── fingerprint.js
│   │   │       ├── headers.js
│   │   │       └── utils/
│   │   │           ├── helperFunctions.py
│   │   │           ├── logger.js
│   │   │           └── delays.js
│   │   ├── /browserAutomation/               # Browser automation
│   │   │   ├── /puppeteer/
│   │   │   │   ├── index.js
│   │   │   │   ├── mimicBehavior.js
│   │   │   │   └── stealth.js
│   │   │   ├── /selenium/
│   │   │   │   ├── browser.py
│   │   │   │   ├── mimic_behavior.py
│   │   │   │   └── requirements.txt
│   │   │   ├── /playwright/
│   │   │   │   ├── main.py
│   │   │   │   └── mimic_behavior.py
│   │   │   └── /shared/
│   │   │       ├── fingerprinting.js
│   │   │       ├── behavior_helpers.py
│   │   │       └── headers.js
│   │   ├── /ipManagement/                     # IP pools, health, rotation
│   │   │   ├── ip_list.json
│   │   │   ├── health_check.go
│   │   │   ├── rotation.py
│   │   │   └── reputation.db
│   │   ├── /security/                         # Security modules
│   │   │   ├── fingerprint_obfuscation.js
│   │   │   ├── header_randomizer.js
│   │   │   ├── protocol_obfuscation.py
│   │   │   └── ssl_handshake.js
│   │   ├── /utils/                            # Utility scripts
│   │   │   ├── logger.py
│   │   │   ├── delay.js
│   │   │   ├── helpers.py
│   │   │   └── random_headers.js
│   │   └── /services/                         # Microservices
│   │       ├── user_service.py
│   │       ├── auth_service.py
│   │       ├── metrics_service.py
│   │       └── messaging_service.py
│   │
│   ├── /api/                                # API Gateway Layer
│   │   ├── /rest/
│   │   │   ├── index.js
│   │   │   ├── rateLimiter.js
│   │   │   ├── healthCheck.js
│   │   │   ├── adminRoutes.js
│   │   │   └── logs.js
│   │   ├── /graphql/
│   │   │   ├── schema.graphql
│   │   │   ├── resolvers.js
│   │   │   └── context.js
│   │   └── server.js
│   │
│   ├── /config/                            # Configuration files
│   │   ├── app-config.yml
│   │   ├── security.yml
│   │   ├── network_list.json
│   │   ├── domain_whitelist.json
│   │   ├── secrets/
│   │   │   ├── aws.yml
│   │   │   └── envs/
│   │   │       └── production.env
│   │   └── defaults/
│   │       ├── default_network.yml
│   │       ├── default_security.yml
│   │       └── default_config.yml
│   │
│   ├── /scripts/                            # Automation & build scripts
│   │   ├── build_all.sh
│   │   ├── deploy.sh
│   │   ├── start_services.sh
│   │   ├── monitor_logs.sh
│   │   ├── cleanup.sh
│   │   └── update_modules.sh
│   │
│   ├── /docker/                             # Dockerfiles & compose
│   │   ├── docker-compose.yml
│   │   ├── core.Dockerfile
│   │   ├── browser.Dockerfile
│   │   ├── api.Dockerfile
│   │   ├── monitor.Dockerfile
│   │   └── k8s/
│   │       ├── deployment.yaml
│   │       ├── service.yaml
│   │       └── ingress.yaml
│   │
│   └── /tests/                              # Tests (unit, integration, e2e)
│       ├── /unit/
│       │   ├── core.test.js
│       │   ├── browser.test.py
│       │   ├── ip_management.test.py
│       │   └── security.test.js
│       ├── /integration/
│       │   ├── core_integration.test.js
│       │   └── api_integration.test.js
│       └── /e2e/
│           ├── flow_test.js
│           └── performance_test.sh
│
├── /monitoring/                          # Monitoring dashboards & alerts
│   ├── /prometheus/
│   │   ├── prometheus.yml
│   │   └── rules/
│   │       ├── high_latency.yml
│   │       └── high_error_rate.yml
│   ├── /grafana/
│   │   ├── dashboards/
│   │   │   ├── system_overview.json
│   │   │   ├── traffic_metrics.json
│   │   │   └── error_rates.json
│   │   └── provisioning/
│   │       ├── dashboards/
│   │       └── datasources/
│   └── alerting/
│       ├── alert_rules.yml
│       └── notification_channels.yml
│
├── /ci-cd/                              # CI/CD pipelines
│   ├── Jenkinsfile
│   ├── github-actions.yml
│   ├── circleci.yml
│   └── gitlab-ci.yml
│
├── /misc/                              # Legacy, large datasets, auto-generated files
│   ├── large_data_files/
│   │   ├── sample_dataset1.csv
│   │   ├── sample_dataset2.json
│   │   └── legacy_logs/
│   ├── auto_generated/
│   │   ├── swagger_auto.json
│   │   └── api_docs.md
│   └── deprecated/
│       ├── old_system_code/
│       ├── legacy_protocols/
│       └── deprecated_configs/
│
├── README.md                            # Project overview, setup instructions
├── LICENSE
├── package.json                         # Node.js dependencies
├── requirements.txt                     # Python dependencies
├── go.mod                               # Go dependencies
├── Cargo.toml                           # Rust dependencies
├── .gitignore
├── .env                                 # Environment variables
└── setup_scripts/                       # Setup & bootstrap scripts
    ├── bootstrap.sh
    ├── install_dependencies.sh
    ├── initialize_env.sh
    └── backup_configs.sh

This is a network gateway if you know you know prxy :} also make it one pages
with black background and purple searchbar 